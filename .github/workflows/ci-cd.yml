name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:
    inputs:
      run_security_scan:
        description: 'Run security scan'
        required: false
        default: true
        type: boolean
      run_docker_build:
        description: 'Build Docker images'
        required: false
        default: false
        type: boolean

jobs:
  # フロントエンドのテストとビルド
  frontend:
    name: Frontend Tests & Build
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run linter
      run: npm run lint
      continue-on-error: true
    
    - name: Build
      run: npm run build
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: frontend-build
        path: .next/
      if: success()

  # バックエンドのテストとビルド
  backend:
    name: Backend Tests & Build
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:16-alpine
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: thinking_blocks_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.21'
    
    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: |
          ~/go/pkg/mod
          ~/.cache/go-build
        key: ${{ runner.os }}-go-${{ hashFiles('backend/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-
    
    - name: Install dependencies
      working-directory: ./backend
      run: go mod download
    
    - name: Run tests
      working-directory: ./backend
      env:
        DATABASE_URL: postgres://postgres:postgres@localhost:5432/thinking_blocks_test?sslmode=disable
        REDIS_URL: localhost:6379
      run: go test -v -race -coverprofile=coverage.out ./...
      continue-on-error: true
    
    - name: Generate coverage report
      working-directory: ./backend
      run: go tool cover -html=coverage.out -o coverage.html
      if: always()
    
    - name: Upload coverage
      uses: codecov/codecov-action@v4
      with:
        files: ./backend/coverage.out
        flags: backend
        token: ${{ secrets.CODECOV_TOKEN }}
      if: always()
      continue-on-error: true
    
    - name: Build
      working-directory: ./backend
      run: go build -v -o thinking-blocks-backend

  # セキュリティスキャン
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || (github.event_name == 'workflow_dispatch' && inputs.run_security_scan)
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
      continue-on-error: true
    
    - name: Upload Trivy results to GitHub Security
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: 'trivy-results.sarif'
      if: always()
      continue-on-error: true

  # Dockerイメージのビルド（プッシュはスキップ）
  docker:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: [frontend, backend]
    if: (github.event_name == 'push' && github.ref == 'refs/heads/main') || (github.event_name == 'workflow_dispatch' && inputs.run_docker_build)
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build frontend image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        push: false
        tags: thinking-blocks-frontend:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    - name: Build backend image
      uses: docker/build-push-action@v5
      with:
        context: ./backend
        file: ./backend/Dockerfile
        push: false
        tags: thinking-blocks-backend:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max
